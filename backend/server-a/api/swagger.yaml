---
swagger: "2.0"
info:
  description:
    This is the Swagger 2.0 API for Web Architectures course group project work.
  version: "1.1.0"
  title: Make me a sandwich
  contact:
    email: mikko.nurminen@tuni.fi
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html

host: localhost
basePath: /v1
schemes:
- http

tags:
- name: order
  description: Sandwich orders
- name: sandwich
  description: Types of sandwich that can be ordered can order

paths:
  /order:
    get:
      x-swagger-router-controller: Order
      operationId: getOrders
      tags:
      - order
      summary: Get a list of all orders. Empty array if no orders are found.
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'

    post:
      x-swagger-router-controller: Order
      operationId: addOrder
      tags:
      - order
      summary: Add an order for an sandwich
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: place an order for a sandwich
        required: true
        schema:
          $ref: '#/definitions/Order'
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Order not created

  /order/{orderId}:
    get:
      x-swagger-router-controller: Order
      operationId: getOrderById
      tags:
      - order
      summary: Find an order by its ID
      description: IDs must be positive integers
      produces:
      - application/json
      parameters:
      - name: orderId
        in: path
        description: ID of the order that needs to be fetched
        required: true
        type: integer
        minimum: 1
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Order'
        400:
          description: Invalid ID supplied
        404:
          description: Order not found

  /sandwich:
    get:
      x-swagger-router-controller: Sandwich
      operationId: getSandwiches
      tags:
      - sandwich
      summary: Get a list of all sandwiches. Empty array if no sandwiches are found.
      produces:
      - application/json
      parameters: []
      responses:
        200:
          description: successful operation
          schema:
            type: array
            items:
              $ref: '#/definitions/Order'

    post:
      x-swagger-router-controller: Sandwich
      operationId: addSandwich
      tags:
      - sandwich
      summary: Add a new sandwich to the store. Needs an API key.
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: body
        description: Sandwich object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Sandwich'
      responses:
        405:
          description: Invalid input
      security:
      - api_key: []

  /sandwich/{sandwichId}:
    get:
      x-swagger-router-controller: Sandwich
      operationId: getSandwichById
      tags:
      - sandwich
      summary: Find sandwich by ID
      description: Returns a single sandwich
      produces:
      - application/json
      parameters:
      - name: sandwichId
        in: path
        description: ID of sandwich to return
        required: true
        type: integer
        format: int64
      responses:
        200:
          description: successful operation
          schema:
            $ref: '#/definitions/Sandwich'
        400:
          description: Invalid ID supplied
        404:
          description: Sandwich not found
      security:
      - api_key: []

    post:
      x-swagger-router-controller: Sandwich
      operationId: updateSandwich
      tags:
      - sandwich
      summary: Updates a sandwich in the store with JSON in body
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - name: sandwichId
        in: path
        description: ID of sandwich to return
        required: true
        type: integer
        format: int64
      - in: body
        name: body
        description: Sandwich object that needs to be added to the store
        required: true
        schema:
          $ref: '#/definitions/Sandwich'
      responses:
        405:
          description: Invalid input
      security:
      - api_key: []

    delete:
      x-swagger-router-controller: Sandwich
      operationId: deleteSandwich
      tags:
      - sandwich
      summary: Deletes a sandwich
      produces:
      - application/json
      parameters:
      - name: api_key
        in: header
        required: false
        type: string
      - name: sandwichId
        in: path
        description: Sandwich id to delete
        required: true
        type: integer
        format: int64
      responses:
        400:
          description: Invalid ID supplied
        404:
          description: Sandwich not found
      security:
      - api_key: []

securityDefinitions:
  api_key:
    type: apiKey
    name: X-API-KEY
    in: header

definitions:
  Order:
    type: object
    required:
    - sandwichId
    properties:
      id:
        type: integer
        format: int64
      sandwichId:
        type: integer
        format: int64
      status:
        type: string
        description: Order Status
        enum:
        - ordered
        - received
        - inQueue
        - ready
        - failed
    xml:
      name: Order
    example:
      sandwichId: 6
      id: 0
      status: ordered

#  Topping:
#    type: object
#    required:
#    - name
#    properties:
#      id:
#        type: integer
#        format: int64
#      name:
#        type: string
#    xml:
#      name: Tag
#    example:
#      name: name
#      id: 6

  Sandwich:
    type: object
    required:
    - breadType
    - name
    properties:
      id:
        type: integer
        format: int64
      name:
        type: string
        example: my-super-sandwich
#      toppings:
#        type: array
#        xml:
#          name: toppings
#          wrapped: true
#        items:
#          $ref: '#/definitions/Topping'
      breadType:
        type: string
        description: bread used in the sandwich
        enum:
        - oat
        - rye
        - wheat
    xml:
      name: Sandwich
    example:
      name: my-super-sandwich
      toppings:
      - name: name
        id: 6
      - name: name
        id: 6
      id: 0
      breadType: oat
