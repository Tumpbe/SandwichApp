version: "3"

services:

  frontend:
    build:
      dockerfile: Dockerfile
      context: ./frontend
    ports: 
      - "3000:3000"
    environment:
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - /app/node_modules
    networks:
      - api

  server-a:
    depends_on:
      - rabbitmq
    command: ["/app/utils/wait-for-it.sh", "rabbitmq:5672", "--",  "npm", "start"]
    build:
      dockerfile: Dockerfile
      context: ./backend/server-a
    expose:
      - "8080"
    ports:
      - "8081:8080"
    environment:
      CHOKIDAR_USEPOLLING: "true"
      CLIENT_API_KEY: WEB2_SECRET
    volumes:
      - /app/node_modules
    networks:
      - db
      - api
      - volt

  rabbitmq:
    image: rabbitmq:3-management
    expose:
      - "5672"
    ports:
      - "15672:15672"
    networks:
      - volt
      - subway

  server-b:
    depends_on:
      - rabbitmq
      - database
    command: ["/app/utils/wait-for-it.sh", "rabbitmq:5672", "--",  "npm", "start"]
    build:
      dockerfile: Dockerfile
      context: ./backend/server-b
    environment:
      CHOKIDAR_USEPOLLING: "true"
    volumes:
      - /app/node_modules
    networks:
      - subway

  database:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./database/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
      - ./database/fill_tables.sql:/docker-entrypoint-initdb.d/fill_tables.sql
    expose:
      - "5432"
    networks:
      - db
 
volumes:
  db-data:

networks:
  db:      # Database access
  api:     # Server A's API access
  volt:    # Server A <=> RabbitMQ
  subway:  # Server B <=> RabbitMQ

# If you use databases for storing information, you can define
# their volumes here.
# Documentation: https://docs.docker.com/storage/volumes/
# Personally I like to look at the database's image's Dockerfile
# in the Docker Hub to see what directory it uses to store data.
# volumes:
